# NEXT TWO WEEKS

## Bigger Tasks

### First user test pass

Goals:

* Is this faster/easier/better for you to share links?
  * Is oauth an issue?
  * sharing is easier/better
  * is it simple or understandable?

User testing questions:
- Does the icon make sense?
- Does the acount sign in work for you? (something like that)
- Would you recommend to other?

Tasks:

* Consistent Branding! across extension, OAUTH app names, front page, extension ID, etc...  - Bryan (coordinate)
  * Twitter OAuth - Shane

* make config files inherit a 'default' so we can have some values for the
  production server (they may already support this) - Shane

* Maybe consider something different for the settings tab icon and button. -Andy

* Store info on if first share, and if so after first share, give them a link to the service to see if it shared. - Bryan

* Save persistent cookie for linkdrop session? Video says only need to save the name once, need
to reconcile expectations.

----------------------

* NEED BETTER ERROR MESSAGES from extension for when it cannot work, like:
  * going to an ip address URL
  * going to an about: URL

  * If user clicks remove link, then add, always use OAuth forceLogin, but only for
    the remove/add case, not for first adds.

* Bugs
  * Share per tab can possibly close the wrong (or not close the shared) linkdrop if you've switched tabs

* Reconsider the long and short URL being shown next to the text input.

## Smaller Changes

* Chrome to phone
* Give another way to access history page outside of the "shared!" status.
* If browser goes to about:config (non-web pages), do not show the share UI, or show a "not allowed" UI.
  At the very least, check for exceptions on these pages, about:config has a canvas error at the moment.
* Change extension to start reveal animation right away instead of waiting for iframe onload. Difficult,
  since animating while the browser component loads means the animation is choppy. Perhaps put in a placeholder
  xul element and have the browser page load in the background, then swap them once the page loads. Or,
  pre-seed the browser cache with the page, by requesting it after first install?


# OTHER TASKS

* Set up testing/benchmarking
  * Set up a mock service that we can use for testing send API?
* Switch to async/queue-based send API
* Use google contacts API to enable gmail tab autocomplete for To: address



